
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'



_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items



_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [

  ("S' -> module","S'",1,None,None,None),
  ('atom -> NUMBER','atom',1,'p_atom_1','ply.py',126),
  ('atom -> STRING','atom',1,'p_atom_2','ply.py',126),
  ('atom -> TRUE','atom',1,'p_atom_3','ply.py',126),
  ('atom -> FALSE','atom',1,'p_atom_4','ply.py',126),
  ('atom -> TYPENAME','atom',1,'p_atom_5','ply.py',126),
  ('atom -> NAME','atom',1,'p_atom_6','ply.py',126),
  ('atom -> list','atom',1,'p_atom_7','ply.py',126),
  ('defargs -> NAME','defargs',1,'p_defargs_1','ply.py',126),
  ('defargs -> NAME COMMA_ defargs','defargs',3,'p_defargs_2','ply.py',126),
  ('elem -> value','elem',1,'p_elem_1','ply.py',126),
  ('elem -> value OP value','elem',3,'p_elem_2','ply.py',126),
  ('elem -> ifexpr','elem',1,'p_elem_3','ply.py',126),
  ('elem -> PLUS_ value','elem',2,'p_elem_4','ply.py',126),
  ('elem -> MINUS_ value','elem',2,'p_elem_5','ply.py',126),
  ('elem -> NOT_ value','elem',2,'p_elem_6','ply.py',126),
  ('expr -> elem','expr',1,'p_expr_1','ply.py',126),
  ('fargs -> elem','fargs',1,'p_fargs_1','ply.py',126),
  ('fargs -> elem COMMA_ fargs','fargs',3,'p_fargs_2','ply.py',126),
  ('fcall -> value LPAREN_ RPAREN_','fcall',3,'p_fcall_1','ply.py',126),
  ('fcall -> value LPAREN_ fargs RPAREN_','fcall',4,'p_fcall_2','ply.py',126),
  ('fundef -> NAME LPAREN_ defargs RPAREN_ EQUAL_ expr','fundef',6,'p_fundef_1','ply.py',126),
  ('ifexpr -> IF_ value THEN_ elem ELSE_ elem','ifexpr',6,'p_ifexpr_1','ply.py',126),
  ('items -> elem','items',1,'p_items_1','ply.py',126),
  ('items -> elem COMMA_ items','items',3,'p_items_2','ply.py',126),
  ('items -> elem COMMA_ items COMMA_','items',4,'p_items_3','ply.py',126),
  ('list -> TK_SYMB_12_ TK_SYMB_13_','list',2,'p_list_1','ply.py',126),
  ('list -> TK_SYMB_12_ items TK_SYMB_13_','list',3,'p_list_2','ply.py',126),
  ('module -> statement SEMICOLON_','module',2,'p_module_1','ply.py',126),
  ('module -> statement SEMICOLON_ module','module',3,'p_module_2','ply.py',126),
  ('statement -> vardef','statement',1,'p_statement_1','ply.py',126),
  ('statement -> fundef','statement',1,'p_statement_2','ply.py',126),
  ('value -> atom','value',1,'p_value_1','ply.py',126),
  ('value -> fcall','value',1,'p_value_2','ply.py',126),
  ('value -> LPAREN_ expr RPAREN_','value',3,'p_value_3','ply.py',126),
  ('vardef -> NAME EQUAL_ expr','vardef',3,'p_vardef_1','ply.py',126),
]
